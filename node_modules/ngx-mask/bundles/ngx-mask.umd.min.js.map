{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/config.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__read","o","m","ar","error","Separators","config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","clearIfNotMatch","showTemplate","showMaskTyped","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","validation","specialCharacters","patterns","0","pattern","RegExp","9","optional","X","symbol","A","S","M","H","h","withoutValidation","MaskApplierService","_config","maskExpression","actualValue","separator","str","char","decimalChar","precision","x","split","decimals","res","rgx","test","replace","substr","percentage","Number","getPrecision","Infinity","checkInputPrecision","inputValue","decimalMarker","precisionRegEx","precisionMatch","match","substring","endsWith","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","maskAndPattern","_a","mask","customPattern","applyMask","position","cb","cursor","result","multi","backspaceShift","shift","stepBack","slice","inputArray","toString","ipError","filter","startsWith","_checkInput","indexOf","base","SEPARATOR","DOT_SEPARATOR","COMMA_SEPARATOR","strForSep","includes","lastIndexOf","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","_findSpecialChar","newPosition","has","actualShift","find","val","maskSymbol","join","Inject","args","Injectable","tslib_1.__param","MaskService","document","_elementRef","_renderer","_this","_super","isNumberValue","maskIsShown","selStart","selEnd","onChange","_formElement","nativeElement","__","constructor","create","tslib_1.__extends","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","applyValueChanges","activeElement","clearIfNotMatchFn","map","curr","index","compare","symbolToReplace","currSymbol","replaceSymbol","inputVal","Error","_checkForIp","formElementProperty","_b","name","setProperty","checkSpecialCharAmount","arr","isArray","_removeMask","_removeSuffix","_removePrefix","_checkSymbols","specialCharactersForRemove","_regExpForRemove","separatorValue","testFn","_checkPrecision","baseSeparator","maskExpretion","matcher","separatorExpression","toFixed","DOCUMENT","ElementRef","Renderer2","MaskDirective","_maskService","_position","onTouch","ngOnChanges","changes","_maskValue","currentValue","_applyMask","validate","Mask error","counterOfOpt","this_1","opt","length_1","onInput","el","_inputValue","selectionStart","caretShift","_backspaceShift","positionToApply","_code","setSelectionRange","onBlur","onFocus","selectionEnd","keyCode","focus","nextValue","a","code","preventDefault","cursorStart","readOnly","writeValue","_arguments","generator","String","P","Promise","resolve","reject","fulfilled","rejected","then","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_repeatPatternSymbols","maskExp","reduce","accum","currval","_start","_end","repeatNumber","tslib_1.__decorate","Input","HostListener","MaskDirective_1","Directive","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","MaskPipe","transform","Pipe","pure","NgxMaskModule","forRoot","configValue","ngModule","NgxMaskModule_1","useValue","useFactory","_configFactory","deps","forChild","_configValue","NgModule","exports","declarations","initConfig","Function"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\nexport enum Separators {\n    SEPARATOR = 'separator',\n    COMMA_SEPARATOR = 'comma_separator',\n    DOT_SEPARATOR = 'dot_separator',\n}\n\n@Injectable()\nexport class MaskApplierService {\n    public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n    public hiddenInput: IConfig['hiddenInput'];\n    public showTemplate!: IConfig['showTemplate'];\n    public clearIfNotMatch!: IConfig['clearIfNotMatch'];\n    public maskExpression: string = '';\n    public actualValue: string = '';\n    public shownMaskExpression: string = '';\n    public maskSpecialCharacters!: IConfig['specialCharacters'];\n    public maskAvailablePatterns!: IConfig['patterns'];\n    public prefix!: IConfig['prefix'];\n    public suffix!: IConfig['suffix'];\n    public customPattern!: IConfig['patterns'];\n    public ipError?: boolean;\n    public showMaskTyped!: IConfig['showMaskTyped'];\n    public validation: IConfig['validation'];\n\n    private _shift!: Set<number>;\n\n    public constructor(@Inject(config) protected _config: IConfig) {\n        this._shift = new Set();\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.hiddenInput = this._config.hiddenInput;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.validation = this._config.validation;\n    }\n    // tslint:disable-next-line:no-any\n    public applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n    ): string {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n        let cursor: number = 0;\n        let result: string = ``;\n        let multi: boolean = false;\n        let backspaceShift: boolean = false;\n        let shift: number = 1;\n        let stepBack: boolean = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        const inputArray: string[] = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            this.ipError = !!(inputArray.filter((i: string) => i === '.').length < 3 && inputArray.length < 7);\n            maskExpression = '099.099.099.099';\n        }\n        if (maskExpression.startsWith('percent')) {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)) {\n                inputValue = this._checkInput(inputValue);\n                const precision: number = this.getPrecision(maskExpression);\n                inputValue = this.checkInputPrecision(inputValue, precision, '.');\n            }\n            if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n                const base: string = inputValue.substring(0, inputValue.indexOf('.') - 1);\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            } else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        } else if (\n            maskExpression.startsWith(Separators.SEPARATOR) ||\n            maskExpression.startsWith(Separators.DOT_SEPARATOR) ||\n            maskExpression.startsWith(Separators.COMMA_SEPARATOR)\n        ) {\n            if (\n                inputValue.match('[wÐ°-ÑÐ-Ð¯]') ||\n                inputValue.match('[ÐÑÐ-Ñ]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_Â£Â¬'+|~=`{}\\[\\]:\";<>.?\\/]/)\n            ) {\n                inputValue = this._checkInput(inputValue);\n            }\n            const precision: number = this.getPrecision(maskExpression);\n            let strForSep: string;\n            if (maskExpression.startsWith(Separators.SEPARATOR)) {\n                if (\n                    inputValue.includes(',') &&\n                    inputValue.endsWith(',') &&\n                    inputValue.indexOf(',') !== inputValue.lastIndexOf(',')\n                ) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                inputValue = inputValue.replace('.', ' ');\n            }\n            if (maskExpression.startsWith(Separators.DOT_SEPARATOR)) {\n                if (\n                    inputValue.indexOf('.') !== -1 &&\n                    inputValue.indexOf('.') === inputValue.lastIndexOf('.') &&\n                    (inputValue.indexOf('.') > 3 || inputValue.length < 6)\n                ) {\n                    inputValue = inputValue.replace('.', ',');\n                }\n                inputValue =\n                    inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== ','\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            if (maskExpression.startsWith(Separators.COMMA_SEPARATOR)) {\n                inputValue =\n                    inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== '.'\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            if (maskExpression.startsWith(Separators.SEPARATOR)) {\n                if (inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:.\";<>?\\/]/)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                inputValue = this.checkInputPrecision(inputValue, precision, ',');\n                strForSep = inputValue.replace(/\\s/g, '');\n                result = this.separator(strForSep, ' ', ',', precision);\n            } else if (maskExpression.startsWith(Separators.DOT_SEPARATOR)) {\n                if (inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:\\s\";<>?\\/]/)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                inputValue = this.checkInputPrecision(inputValue, precision, ',');\n                strForSep = inputValue.replace(/\\./g, '');\n                result = this.separator(strForSep, '.', ',', precision);\n            } else if (maskExpression.startsWith(Separators.COMMA_SEPARATOR)) {\n                strForSep = inputValue.replace(/,/g, '');\n                result = this.separator(strForSep, ',', '.', precision);\n            }\n\n            const commaShift: number = result.indexOf(',') - inputValue.indexOf(',');\n            const shiftStep: number = result.length - inputValue.length;\n\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                let _shift: number = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            } else if (\n                (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n                (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)\n            ) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                position += shiftStep;\n                this._shift.add(position);\n            } else {\n                this._shift.clear();\n            }\n        } else {\n            for (\n                // tslint:disable-next-line\n                let i: number = 0, inputSymbol: string = inputArray[0];\n                i < inputArray.length;\n                i++, inputSymbol = inputArray[i]\n            ) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                } else if (\n                    maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n                ) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                } else if (\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\n                    maskExpression[cursor + 1] === '*'\n                ) {\n                    result += inputSymbol;\n                    multi = true;\n                } else if (\n                    maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n                ) {\n                    result += inputSymbol;\n                    cursor += 3;\n                } else if (\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor]) ||\n                    (this.hiddenInput &&\n                        this.maskAvailablePatterns[maskExpression[cursor]] &&\n                        this.maskAvailablePatterns[maskExpression[cursor]].symbol === inputSymbol)\n                ) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'd') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 31 || inputValue[cursor] === '/') {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        if (\n                            (inputValue[cursor - 1] === '/' &&\n                                (Number(inputValue.slice(cursor, cursor + 2)) > 12 ||\n                                    inputValue[cursor + 1] === '/')) ||\n                            (Number(inputValue.slice(cursor - 1, cursor + 1)) > 12 ||\n                                Number(inputValue.slice(0, 2)) > 31 ||\n                                (Number(inputValue[cursor - 1]) > 1 && inputValue[cursor - 2] === '/'))\n                        ) {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n\n                    result += inputSymbol;\n                    cursor++;\n                } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                        ? inputArray.length\n                        : cursor;\n                    this._shift.add(shiftStep + this.prefix.length || 0);\n                    i--;\n                } else if (\n                    this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor]] &&\n                    this.maskAvailablePatterns[maskExpression[cursor]].optional\n                ) {\n                    cursor++;\n                    i--;\n                } else if (\n                    this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi\n                ) {\n                    cursor += 3;\n                    result += inputSymbol;\n                } else if (\n                    this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi\n                ) {\n                    cursor += 3;\n                    result += inputSymbol;\n                } else if (\n                    this.showMaskTyped &&\n                    this.maskSpecialCharacters.indexOf(inputSymbol) < 0 &&\n                    inputSymbol !== '_'\n                ) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (\n            result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1\n        ) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n\n        let newPosition: number = position + 1;\n\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n\n        let actualShift: number = this._shift.has(position) ? shift : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let res: string = this.suffix ? `${this.prefix}${result}${this.suffix}` : `${this.prefix}${result}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    public _findSpecialChar(inputSymbol: string): undefined | string {\n        return this.maskSpecialCharacters.find((val: string) => val === inputSymbol);\n    }\n\n    protected _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n        this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n        return (\n            this.maskAvailablePatterns[maskSymbol] &&\n            this.maskAvailablePatterns[maskSymbol].pattern &&\n            this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol)\n        );\n    }\n\n    private separator = (str: string, char: string, decimalChar: string, precision: number) => {\n        str += '';\n        const x: string[] = str.split(decimalChar);\n        const decimals: string = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n        let res: string = x[0];\n        const rgx: RegExp = /(\\d+)(\\d{3})/;\n        while (rgx.test(res)) {\n            res = res.replace(rgx, '$1' + char + '$2');\n        }\n        if (precision === undefined) {\n            return res + decimals;\n        } else if (precision === 0) {\n            return res;\n        }\n        return res + decimals.substr(0, precision + 1);\n    };\n\n    private percentage = (str: string): boolean => {\n        return Number(str) >= 0 && Number(str) <= 100;\n    };\n\n    private getPrecision = (maskExpression: string): number => {\n        const x: string[] = maskExpression.split('.');\n        if (x.length > 1) {\n            return Number(x[x.length - 1]);\n        }\n        return Infinity;\n    };\n\n    private checkInputPrecision = (inputValue: string, precision: number, decimalMarker: string): string => {\n        if (precision < Infinity) {\n            let precisionRegEx: RegExp;\n\n            if (decimalMarker === '.') {\n                precisionRegEx = new RegExp(`\\\\.\\\\d{${precision}}.*$`);\n            } else {\n                precisionRegEx = new RegExp(`,\\\\d{${precision}}.*$`);\n            }\n\n            const precisionMatch: RegExpMatchArray | null = inputValue.match(precisionRegEx);\n            if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            } else if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        return inputValue;\n    };\n\n    private _checkInput(str: string): string {\n        return str\n            .split('')\n            .filter((i: string) => i.match('\\\\d') || i === '.' || i === ',')\n            .join('');\n    }\n    // tslint:disable-next-line: max-file-line-count\n}\n","import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n    suffix: string;\n    prefix: string;\n    clearIfNotMatch: boolean;\n    showTemplate: boolean;\n    showMaskTyped: boolean;\n    shownMaskExpression: string;\n    dropSpecialCharacters: boolean | string[];\n    specialCharacters: string[];\n    hiddenInput: boolean | undefined;\n    validation: boolean;\n    patterns: {\n        [character: string]: {\n            pattern: RegExp;\n            optional?: boolean;\n            symbol?: string;\n        };\n    };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<IConfig> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<IConfig> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n    suffix: '',\n    prefix: '',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    validation: true,\n    // tslint:disable-next-line: quotemark\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\n\nexport const withoutValidation: string[] = [\n    'percent',\n    'Hh:m0:s0',\n    'Hh:m0',\n    'Hh',\n    'm0:s0',\n    's0',\n    'm0',\n    'separator',\n    'dot_separator',\n    'comma_separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\nimport { MaskApplierService, Separators } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n    public validation: boolean = true;\n    public maskExpression: string = '';\n    public isNumberValue: boolean = false;\n    public showMaskTyped: boolean = false;\n    public maskIsShown: string = '';\n    public selStart: number | null = null;\n    public selEnd: number | null = null;\n    protected _formElement: HTMLInputElement;\n    // tslint:disable-next-line\n    public onChange = (_: any) => {};\n\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        @Inject(config) protected _config: IConfig,\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2\n    ) {\n        super(_config);\n        this._formElement = this._elementRef.nativeElement;\n    }\n\n    // tslint:disable-next-line:cyclomatic-complexity\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n    ): string {\n        if (!maskExpression) {\n            return inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        const getSymbol: string = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n        let newInputValue: string = '';\n        if (this.hiddenInput !== undefined) {\n            let actualResult: string[] = this.actualValue.split('');\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                        ? actualResult.length - inputValue.length === 1\n                            ? actualResult.splice(this.selStart - 1, 1)\n                            : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                        : null\n                    : null\n                : (actualResult = []);\n            newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n        }\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        const result: string = super.applyMask(newInputValue, maskExpression, position, cb);\n        this.actualValue = this.getActualValue(result);\n\n        if (\n            (this.maskExpression.startsWith(Separators.SEPARATOR) ||\n                this.maskExpression.startsWith(Separators.DOT_SEPARATOR)) &&\n            this.dropSpecialCharacters === true\n        ) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== ',');\n        }\n        if (this.maskExpression.startsWith(Separators.COMMA_SEPARATOR) && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== '.');\n        }\n\n        this.formControlResult(result);\n\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n            }\n            return result;\n        }\n        const resLen: number = result.length;\n        const prefNmask: string = this.prefix + this.maskIsShown;\n        return result + (this.maskExpression === 'IP' ? prefNmask : prefNmask.slice(resLen));\n    }\n\n    public applyValueChanges(position: number = 0, cb: Function = () => {}): void {\n        this._formElement.value = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n        if (this._formElement === this.document.activeElement) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n\n    public hideInput(inputValue: string, maskExpression: string): string {\n        return inputValue\n            .split('')\n            .map((curr: string, index: number) => {\n                if (\n                    this.maskAvailablePatterns &&\n                    this.maskAvailablePatterns[maskExpression[index]] &&\n                    this.maskAvailablePatterns[maskExpression[index]].symbol\n                ) {\n                    return this.maskAvailablePatterns[maskExpression[index]].symbol;\n                }\n                return curr;\n            })\n            .join('');\n    }\n\n    // this function is not necessary, it checks result against maskExpression\n    public getActualValue(res: string): string {\n        const compare: string[] = res\n            .split('')\n            .filter(\n                (symbol: string, i: number) =>\n                    this._checkSymbolMask(symbol, this.maskExpression[i]) ||\n                    (this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i])\n            );\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    }\n\n    public shiftTypedSymbols(inputValue: string): string {\n        let symbolToReplace: string = '';\n        const newInputValue: string[] =\n            (inputValue &&\n                inputValue.split('').map((currSymbol: string, index: number) => {\n                    if (\n                        this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n                        inputValue[index + 1] !== this.maskExpression[index + 1]\n                    ) {\n                        symbolToReplace = currSymbol;\n                        return inputValue[index + 1];\n                    }\n                    if (symbolToReplace.length) {\n                        const replaceSymbol: string = symbolToReplace;\n                        symbolToReplace = '';\n                        return replaceSymbol;\n                    }\n                    return currSymbol;\n                })) ||\n            [];\n        return newInputValue.join('');\n    }\n\n    public showMaskInInput(inputVal?: string): string {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            } else {\n                return this.shownMaskExpression;\n            }\n        } else if (this.showMaskTyped) {\n            if (inputVal) {\n                return this._checkForIp(inputVal);\n            }\n            return this.maskExpression.replace(/\\w/g, '_');\n        }\n        return '';\n    }\n\n    public clearIfNotMatchFn(): void {\n        if (\n            this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !== this._formElement.value.length\n        ) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(this._formElement.value, this.maskExpression);\n        }\n    }\n\n    public set formElementProperty([name, value]: [string, string | boolean]) {\n        this._renderer.setProperty(this._formElement, name, value);\n    }\n\n    public checkSpecialCharAmount(mask: string): number {\n        const chars: string[] = mask.split('').filter((item: string) => this._findSpecialChar(item));\n        return chars.length;\n    }\n\n    private _checkForIp(inputVal: string): string {\n        if (inputVal === '#') {\n            return '_._._._';\n        }\n        const arr: string[] = [];\n        for (let i: number = 0; i < inputVal.length; i++) {\n            if (inputVal[i].match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return '_._._';\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return '_._';\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return '_';\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n\n    private formControlResult(inputValue: string): void {\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(\n                this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)\n            );\n        } else if (this.dropSpecialCharacters) {\n            this.onChange(this._checkSymbols(inputValue));\n        } else {\n            this.onChange(this._removeSuffix(this._removePrefix(inputValue)));\n        }\n    }\n\n    private _removeMask(value: string, specialCharactersForRemove: string[]): string {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n\n    private _removePrefix(value: string): string {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n\n    private _removeSuffix(value: string): string {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, '') : value;\n    }\n\n    private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n        return new RegExp(specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'), 'gi');\n    }\n\n    private _checkSymbols(result: string): string | number | undefined | null {\n        // TODO should simplify this code\n        let separatorValue: number | null = this.testFn(Separators.SEPARATOR, this.maskExpression);\n        if (separatorValue && this.isNumberValue) {\n            return result === ''\n                ? result\n                : result === ','\n                ? null\n                : this._checkPrecision(\n                      this.maskExpression,\n                      this._removeMask(\n                          this._removeSuffix(this._removePrefix(result)),\n                          this.maskSpecialCharacters\n                      ).replace(',', '.')\n                  );\n        }\n        separatorValue = this.testFn(Separators.DOT_SEPARATOR, this.maskExpression);\n        if (separatorValue && this.isNumberValue) {\n            return result === ''\n                ? result\n                : result === ','\n                ? null\n                : this._checkPrecision(\n                      this.maskExpression,\n                      this._removeMask(\n                          this._removeSuffix(this._removePrefix(result)),\n                          this.maskSpecialCharacters\n                      ).replace(',', '.')\n                  );\n        }\n        separatorValue = this.testFn(Separators.COMMA_SEPARATOR, this.maskExpression);\n        if (separatorValue && this.isNumberValue) {\n            return result === ''\n                ? result\n                : result === '.'\n                ? null\n                : this._checkPrecision(\n                      this.maskExpression,\n                      this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters)\n                  );\n        }\n        if (this.isNumberValue) {\n            return result === ''\n                ? result\n                : Number(this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters));\n        } else if (\n            this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters).indexOf(\n                ','\n            ) !== -1\n        ) {\n            return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters).replace(\n                ',',\n                '.'\n            );\n        } else {\n            return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n        }\n    }\n\n    // TODO should think about helpers\n    private testFn(baseSeparator: string, maskExpretion: string): number | null {\n        const matcher: RegExpMatchArray | null = maskExpretion.match(new RegExp(`^${baseSeparator}\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n\n    private _checkPrecision(separatorExpression: string, separatorValue: string): number | string {\n        if (separatorExpression.indexOf('2') > 0) {\n            return Number(separatorValue).toFixed(2);\n        }\n        return Number(separatorValue);\n    }\n}\n","import { ControlValueAccessor, FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\nimport { CustomKeyboardEvent } from './custom-keyboard-event';\nimport { Directive, forwardRef, HostListener, Inject, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { config, IConfig, withoutValidation } from './config';\nimport { MaskService } from './mask.service';\n\n@Directive({\n    selector: '[mask]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        MaskService,\n    ],\n})\nexport class MaskDirective implements ControlValueAccessor, OnChanges {\n    @Input('mask') public maskExpression: string = '';\n    @Input() public specialCharacters: IConfig['specialCharacters'] = [];\n    @Input() public patterns: IConfig['patterns'] = {};\n    @Input() public prefix: IConfig['prefix'] = '';\n    @Input() public suffix: IConfig['suffix'] = '';\n    @Input() public dropSpecialCharacters: IConfig['dropSpecialCharacters'] | null = null;\n    @Input() public hiddenInput: IConfig['hiddenInput'] | null = null;\n    @Input() public showMaskTyped: IConfig['showMaskTyped'] | null = null;\n    @Input() public shownMaskExpression: IConfig['shownMaskExpression'] | null = null;\n    @Input() public showTemplate: IConfig['showTemplate'] | null = null;\n    @Input() public clearIfNotMatch: IConfig['clearIfNotMatch'] | null = null;\n    @Input() public validation: IConfig['validation'] | null = null;\n    private _maskValue!: string;\n    private _inputValue!: string;\n    private _position: number | null = null;\n    // tslint:disable-next-line\n    private _start!: number;\n    private _end!: number;\n    private _code!: string;\n    // tslint:disable-next-line\n    public onChange = (_: any) => {};\n    public onTouch = () => {};\n\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        private _maskService: MaskService,\n        @Inject(config) protected _config: IConfig\n    ) {}\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        // tslint:disable-next-line:max-line-length\n        const {\n            maskExpression,\n            specialCharacters,\n            patterns,\n            prefix,\n            suffix,\n            dropSpecialCharacters,\n            hiddenInput,\n            showMaskTyped,\n            shownMaskExpression,\n            showTemplate,\n            clearIfNotMatch,\n            validation,\n        } = changes;\n        if (maskExpression) {\n            this._maskValue = changes.maskExpression.currentValue || '';\n        }\n        if (specialCharacters) {\n            if (\n                !specialCharacters.currentValue ||\n                !Array.isArray(specialCharacters.currentValue) ||\n                (Array.isArray(specialCharacters.currentValue) && !specialCharacters.currentValue.length)\n            ) {\n                return;\n            }\n            this._maskService.maskSpecialCharacters = changes.specialCharacters.currentValue || '';\n        }\n        if (patterns) {\n            this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        this._applyMask();\n    }\n\n    // tslint:disable-next-line: cyclomatic-complexity\n    public validate({ value }: FormControl): ValidationErrors | null {\n        if (!this._maskService.validation) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return { 'Mask error': true };\n        }\n        if (\n            this._maskValue.startsWith('dot_separator') ||\n            this._maskValue.startsWith('comma_separator') ||\n            this._maskValue.startsWith('separator')\n        ) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt: number = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if (\n                    this._maskService.maskAvailablePatterns[key].optional &&\n                    this._maskService.maskAvailablePatterns[key].optional === true\n                ) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt: string = this._maskValue\n                            .split('')\n                            .filter((i: string) => i === key)\n                            .join('');\n                        counterOfOpt += opt.length;\n                    } else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (\n                        this._maskValue.indexOf(key) !== -1 &&\n                        value.toString().length >= this._maskValue.indexOf(key)\n                    ) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (\n                this._maskValue.indexOf('*') === 1 ||\n                this._maskValue.indexOf('?') === 1 ||\n                this._maskValue.indexOf('{') === 1\n            ) {\n                return null;\n            } else if (\n                (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?'))\n            ) {\n                return { 'Mask error': true };\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                const length: number = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length < length) {\n                    return { 'Mask error': true };\n                }\n            }\n        }\n        return null;\n    }\n\n    @HostListener('input', ['$event'])\n    public onInput(e: CustomKeyboardEvent): void {\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        this._inputValue = el.value;\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position: number =\n            el.selectionStart === 1\n                ? (el.selectionStart as number) + this._maskService.prefix.length\n                : (el.selectionStart as number);\n        let caretShift: number = 0;\n        let backspaceShift: boolean = false;\n        this._maskService.applyValueChanges(position, (shift: number, _backspaceShift: boolean) => {\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        const positionToApply: number = this._position\n            ? this._inputValue.length + position + caretShift\n            : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n        el.setSelectionRange(positionToApply, positionToApply);\n        if ((this.maskExpression.includes('H') || this.maskExpression.includes('M')) && caretShift === 0) {\n            el.setSelectionRange((el.selectionStart as number) + 1, (el.selectionStart as number) + 1);\n        }\n        this._position = null;\n    }\n\n    @HostListener('blur')\n    public onBlur(): void {\n        this._maskService.clearIfNotMatchFn();\n        this.onTouch();\n    }\n\n    @HostListener('click', ['$event'])\n    public onFocus(e: MouseEvent | CustomKeyboardEvent): void {\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        const posStart: number = 0;\n        const posEnd: number = 0;\n        if (\n            el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // tslint:disable-next-line\n            (e as any).keyCode !== 38\n        )\n            if (this._maskService.showMaskTyped) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                } else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(\n                            this._maskService.actualValue.length,\n                            this._maskService.actualValue.length\n                        );\n                    }\n                }\n            }\n        const nextValue: string | null =\n            !el.value || el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value;\n\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el.value !== nextValue) {\n            el.value = nextValue;\n        }\n\n        /** fix of cursor position with prefix when mouse click occur */\n        if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    public a(e: CustomKeyboardEvent): void {\n        this._code = e.code ? e.code : e.key;\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        this._inputValue = el.value;\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8) {\n            // if (e.keyCode === 37) {\n            //     el.selectionStart = (el.selectionEnd as number) - 1;\n            // }\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (e.keyCode === 8 && (el.selectionStart as number) !== 0) {\n                this.specialCharacters = this._config!.specialCharacters;\n                while (\n                    this.specialCharacters.includes(this._inputValue[(el.selectionStart as number) - 1].toString())\n                ) {\n                    el.setSelectionRange((el.selectionStart as number) - 1, (el.selectionStart as number) - 1);\n                }\n            }\n            if (\n                (el.selectionStart as number) <= this._maskService.prefix.length &&\n                (el.selectionEnd as number) <= this._maskService.prefix.length\n            ) {\n                e.preventDefault();\n            }\n            const cursorStart: number | null = el.selectionStart;\n            // this.onFocus(e);\n            if (\n                e.keyCode === 8 &&\n                !el.readOnly &&\n                cursorStart === 0 &&\n                el.selectionEnd === el.value.length &&\n                el.value.length !== 0\n            ) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n    }\n\n    /** It writes the value in the input */\n    public async writeValue(inputValue: string | number): Promise<void> {\n        if (inputValue === undefined) {\n            inputValue = '';\n        }\n        if (typeof inputValue === 'number') {\n            inputValue = String(inputValue);\n            inputValue = this._maskValue.startsWith('dot_separator') ? inputValue.replace('.', ',') : inputValue;\n            this._maskService.isNumberValue = true;\n        }\n        (inputValue && this._maskService.maskExpression) ||\n        (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))\n            ? (this._maskService.formElementProperty = [\n                  'value',\n                  this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n              ])\n            : (this._maskService.formElementProperty = ['value', inputValue]);\n        this._inputValue = inputValue;\n    }\n\n    // tslint:disable-next-line\n    public registerOnChange(fn: any): void {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n\n    // tslint:disable-next-line\n    public registerOnTouched(fn: any): void {\n        this.onTouch = fn;\n    }\n\n    /** It disables the input element */\n    public setDisabledState(isDisabled: boolean): void {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n\n    private _repeatPatternSymbols(maskExp: string): string {\n        return (\n            (maskExp.match(/{[0-9]+}/) &&\n                maskExp.split('').reduce((accum: string, currval: string, index: number): string => {\n                    this._start = currval === '{' ? index : this._start;\n\n                    if (currval !== '}') {\n                        return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n                    }\n                    this._end = index;\n                    const repeatNumber: number = Number(maskExp.slice(this._start + 1, this._end));\n                    const repaceWith: string = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                    return accum + repaceWith;\n                }, '')) ||\n            maskExp\n        );\n    }\n    // tslint:disable-next-line:no-any\n    private _applyMask(): any {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { MaskApplierService } from './mask-applier.service';\nimport { IConfig } from './config';\n\n@Pipe({\n    name: 'mask',\n    pure: true,\n})\nexport class MaskPipe implements PipeTransform {\n    public constructor(private _maskService: MaskApplierService) {}\n\n    public transform(value: string | number, mask: string | [string, IConfig['patterns']]): string {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\n","import { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\n@NgModule({\n    exports: [MaskDirective, MaskPipe],\n    declarations: [MaskDirective, MaskPipe],\n})\nexport class NgxMaskModule {\n    public static forRoot(configValue?: optionsConfig | (() => optionsConfig)): ModuleWithProviders {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                MaskApplierService,\n            ],\n        };\n    }\n    public static forChild(_configValue?: optionsConfig): ModuleWithProviders {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\n\n/**\n * @internal\n */\nexport function _configFactory(\n    initConfig: optionsConfig,\n    configValue: optionsConfig | (() => optionsConfig)\n): optionsConfig {\n    return configValue instanceof Function ? { ...initConfig, ...configValue() } : { ...initConfig, ...configValue };\n}\n"]}